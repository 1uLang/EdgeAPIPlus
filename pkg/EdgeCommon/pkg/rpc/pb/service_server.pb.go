// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: service_server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建服务
type CreateServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AdminId     int64  `protobuf:"varint,2,opt,name=adminId,proto3" json:"adminId,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// 配置相关
	ServerNamesJSON []byte `protobuf:"bytes,8,opt,name=serverNamesJSON,proto3" json:"serverNamesJSON,omitempty"` // @link json:server_names
	// Deprecated: Do not use.
	ServerNamesJON   []byte  `protobuf:"bytes,19,opt,name=serverNamesJON,proto3" json:"serverNamesJON,omitempty"` // 已过期，请使用 serverNamesJSON 代替
	HttpJSON         []byte  `protobuf:"bytes,9,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
	HttpsJSON        []byte  `protobuf:"bytes,10,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
	TcpJSON          []byte  `protobuf:"bytes,11,opt,name=tcpJSON,proto3" json:"tcpJSON,omitempty"`
	TlsJSON          []byte  `protobuf:"bytes,12,opt,name=tlsJSON,proto3" json:"tlsJSON,omitempty"`
	UnixJSON         []byte  `protobuf:"bytes,13,opt,name=unixJSON,proto3" json:"unixJSON,omitempty"`
	UdpJSON          []byte  `protobuf:"bytes,14,opt,name=udpJSON,proto3" json:"udpJSON,omitempty"`
	WebId            int64   `protobuf:"varint,15,opt,name=webId,proto3" json:"webId,omitempty"`
	ReverseProxyJSON []byte  `protobuf:"bytes,16,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
	ServerGroupIds   []int64 `protobuf:"varint,17,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
	UserPlanId       int64   `protobuf:"varint,18,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
	NodeClusterId    int64   `protobuf:"varint,30,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	IncludeNodesJSON []byte  `protobuf:"bytes,31,opt,name=includeNodesJSON,proto3" json:"includeNodesJSON,omitempty"`
	ExcludeNodesJSON []byte  `protobuf:"bytes,32,opt,name=excludeNodesJSON,proto3" json:"excludeNodesJSON,omitempty"`
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServerRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateServerRequest) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *CreateServerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateServerRequest) GetServerNamesJSON() []byte {
	if x != nil {
		return x.ServerNamesJSON
	}
	return nil
}

// Deprecated: Do not use.
func (x *CreateServerRequest) GetServerNamesJON() []byte {
	if x != nil {
		return x.ServerNamesJON
	}
	return nil
}

func (x *CreateServerRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

func (x *CreateServerRequest) GetTcpJSON() []byte {
	if x != nil {
		return x.TcpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetTlsJSON() []byte {
	if x != nil {
		return x.TlsJSON
	}
	return nil
}

func (x *CreateServerRequest) GetUnixJSON() []byte {
	if x != nil {
		return x.UnixJSON
	}
	return nil
}

func (x *CreateServerRequest) GetUdpJSON() []byte {
	if x != nil {
		return x.UdpJSON
	}
	return nil
}

func (x *CreateServerRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

func (x *CreateServerRequest) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

func (x *CreateServerRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

func (x *CreateServerRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

func (x *CreateServerRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CreateServerRequest) GetIncludeNodesJSON() []byte {
	if x != nil {
		return x.IncludeNodesJSON
	}
	return nil
}

func (x *CreateServerRequest) GetExcludeNodesJSON() []byte {
	if x != nil {
		return x.ExcludeNodesJSON
	}
	return nil
}

type CreateServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *CreateServerResponse) Reset() {
	*x = CreateServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerResponse) ProtoMessage() {}

func (x *CreateServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerResponse.ProtoReflect.Descriptor instead.
func (*CreateServerResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServerResponse) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 修改服务基本信息
type UpdateServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64   `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	NodeClusterId  int64   `protobuf:"varint,4,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	KeepOldConfigs bool    `protobuf:"varint,7,opt,name=keepOldConfigs,proto3" json:"keepOldConfigs,omitempty"` // 是否在老节点上保留一段时间配置
	IsOn           bool    `protobuf:"varint,5,opt,name=isOn,proto3" json:"isOn,omitempty"`
	ServerGroupIds []int64 `protobuf:"varint,6,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
}

func (x *UpdateServerBasicRequest) Reset() {
	*x = UpdateServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerBasicRequest) ProtoMessage() {}

func (x *UpdateServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerBasicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateServerBasicRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateServerBasicRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *UpdateServerBasicRequest) GetKeepOldConfigs() bool {
	if x != nil {
		return x.KeepOldConfigs
	}
	return false
}

func (x *UpdateServerBasicRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

func (x *UpdateServerBasicRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

// 修改服务所在分组
type UpdateServerGroupIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64   `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerGroupIds []int64 `protobuf:"varint,2,rep,packed,name=serverGroupIds,proto3" json:"serverGroupIds,omitempty"`
}

func (x *UpdateServerGroupIdsRequest) Reset() {
	*x = UpdateServerGroupIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerGroupIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerGroupIdsRequest) ProtoMessage() {}

func (x *UpdateServerGroupIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerGroupIdsRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerGroupIdsRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateServerGroupIdsRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerGroupIdsRequest) GetServerGroupIds() []int64 {
	if x != nil {
		return x.ServerGroupIds
	}
	return nil
}

// 修改服务启是否启用
type UpdateServerIsOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	IsOn     bool  `protobuf:"varint,2,opt,name=isOn,proto3" json:"isOn,omitempty"`
}

func (x *UpdateServerIsOnRequest) Reset() {
	*x = UpdateServerIsOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerIsOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerIsOnRequest) ProtoMessage() {}

func (x *UpdateServerIsOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerIsOnRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerIsOnRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateServerIsOnRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerIsOnRequest) GetIsOn() bool {
	if x != nil {
		return x.IsOn
	}
	return false
}

// 修改服务的HTTP等设置
type UpdateServerHTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpJSON []byte `protobuf:"bytes,2,opt,name=httpJSON,proto3" json:"httpJSON,omitempty"`
}

func (x *UpdateServerHTTPRequest) Reset() {
	*x = UpdateServerHTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerHTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerHTTPRequest) ProtoMessage() {}

func (x *UpdateServerHTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerHTTPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerHTTPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateServerHTTPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerHTTPRequest) GetHttpJSON() []byte {
	if x != nil {
		return x.HttpJSON
	}
	return nil
}

type UpdateServerHTTPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId  int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpsJSON []byte `protobuf:"bytes,2,opt,name=httpsJSON,proto3" json:"httpsJSON,omitempty"`
}

func (x *UpdateServerHTTPSRequest) Reset() {
	*x = UpdateServerHTTPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerHTTPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerHTTPSRequest) ProtoMessage() {}

func (x *UpdateServerHTTPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerHTTPSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerHTTPSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateServerHTTPSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerHTTPSRequest) GetHttpsJSON() []byte {
	if x != nil {
		return x.HttpsJSON
	}
	return nil
}

type UpdateServerTCPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TcpJSON  []byte `protobuf:"bytes,2,opt,name=tcpJSON,proto3" json:"tcpJSON,omitempty"`
}

func (x *UpdateServerTCPRequest) Reset() {
	*x = UpdateServerTCPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTCPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTCPRequest) ProtoMessage() {}

func (x *UpdateServerTCPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTCPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTCPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateServerTCPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTCPRequest) GetTcpJSON() []byte {
	if x != nil {
		return x.TcpJSON
	}
	return nil
}

type UpdateServerTLSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TlsJSON  []byte `protobuf:"bytes,2,opt,name=tlsJSON,proto3" json:"tlsJSON,omitempty"`
}

func (x *UpdateServerTLSRequest) Reset() {
	*x = UpdateServerTLSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTLSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTLSRequest) ProtoMessage() {}

func (x *UpdateServerTLSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTLSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTLSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateServerTLSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTLSRequest) GetTlsJSON() []byte {
	if x != nil {
		return x.TlsJSON
	}
	return nil
}

type UpdateServerUnixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UnixJSON []byte `protobuf:"bytes,2,opt,name=unixJSON,proto3" json:"unixJSON,omitempty"`
}

func (x *UpdateServerUnixRequest) Reset() {
	*x = UpdateServerUnixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUnixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUnixRequest) ProtoMessage() {}

func (x *UpdateServerUnixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUnixRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUnixRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateServerUnixRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUnixRequest) GetUnixJSON() []byte {
	if x != nil {
		return x.UnixJSON
	}
	return nil
}

type UpdateServerUDPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UdpJSON  []byte `protobuf:"bytes,2,opt,name=udpJSON,proto3" json:"udpJSON,omitempty"`
}

func (x *UpdateServerUDPRequest) Reset() {
	*x = UpdateServerUDPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUDPRequest) ProtoMessage() {}

func (x *UpdateServerUDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUDPRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUDPRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateServerUDPRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUDPRequest) GetUdpJSON() []byte {
	if x != nil {
		return x.UdpJSON
	}
	return nil
}

type UpdateServerWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	WebId    int64 `protobuf:"varint,2,opt,name=webId,proto3" json:"webId,omitempty"`
}

func (x *UpdateServerWebRequest) Reset() {
	*x = UpdateServerWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerWebRequest) ProtoMessage() {}

func (x *UpdateServerWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerWebRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerWebRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateServerWebRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerWebRequest) GetWebId() int64 {
	if x != nil {
		return x.WebId
	}
	return 0
}

// 修改服务的反向代理设置
type UpdateServerReverseProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId         int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ReverseProxyJSON []byte `protobuf:"bytes,2,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
}

func (x *UpdateServerReverseProxyRequest) Reset() {
	*x = UpdateServerReverseProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerReverseProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerReverseProxyRequest) ProtoMessage() {}

func (x *UpdateServerReverseProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerReverseProxyRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerReverseProxyRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateServerReverseProxyRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerReverseProxyRequest) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

// 查找服务的域名设置
type FindServerNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerNamesRequest) Reset() {
	*x = FindServerNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerNamesRequest) ProtoMessage() {}

func (x *FindServerNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerNamesRequest.ProtoReflect.Descriptor instead.
func (*FindServerNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{13}
}

func (x *FindServerNamesRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindServerNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNamesJSON         []byte                    `protobuf:"bytes,1,opt,name=serverNamesJSON,proto3" json:"serverNamesJSON,omitempty"`
	IsAuditing              bool                      `protobuf:"varint,2,opt,name=isAuditing,proto3" json:"isAuditing,omitempty"`
	AuditingAt              int64                     `protobuf:"varint,5,opt,name=auditingAt,proto3" json:"auditingAt,omitempty"`
	AuditingServerNamesJSON []byte                    `protobuf:"bytes,3,opt,name=auditingServerNamesJSON,proto3" json:"auditingServerNamesJSON,omitempty"`
	AuditingResult          *ServerNameAuditingResult `protobuf:"bytes,4,opt,name=auditingResult,proto3" json:"auditingResult,omitempty"`
}

func (x *FindServerNamesResponse) Reset() {
	*x = FindServerNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerNamesResponse) ProtoMessage() {}

func (x *FindServerNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerNamesResponse.ProtoReflect.Descriptor instead.
func (*FindServerNamesResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{14}
}

func (x *FindServerNamesResponse) GetServerNamesJSON() []byte {
	if x != nil {
		return x.ServerNamesJSON
	}
	return nil
}

func (x *FindServerNamesResponse) GetIsAuditing() bool {
	if x != nil {
		return x.IsAuditing
	}
	return false
}

func (x *FindServerNamesResponse) GetAuditingAt() int64 {
	if x != nil {
		return x.AuditingAt
	}
	return 0
}

func (x *FindServerNamesResponse) GetAuditingServerNamesJSON() []byte {
	if x != nil {
		return x.AuditingServerNamesJSON
	}
	return nil
}

func (x *FindServerNamesResponse) GetAuditingResult() *ServerNameAuditingResult {
	if x != nil {
		return x.AuditingResult
	}
	return nil
}

// 修改服务的域名设置
type UpdateServerNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId        int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerNamesJSON []byte `protobuf:"bytes,2,opt,name=serverNamesJSON,proto3" json:"serverNamesJSON,omitempty"`
}

func (x *UpdateServerNamesRequest) Reset() {
	*x = UpdateServerNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerNamesRequest) ProtoMessage() {}

func (x *UpdateServerNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerNamesRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerNamesRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateServerNamesRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerNamesRequest) GetServerNamesJSON() []byte {
	if x != nil {
		return x.ServerNamesJSON
	}
	return nil
}

// 审核服务的域名设置
type UpdateServerNamesAuditingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64                     `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	AuditingResult *ServerNameAuditingResult `protobuf:"bytes,2,opt,name=auditingResult,proto3" json:"auditingResult,omitempty"`
}

func (x *UpdateServerNamesAuditingRequest) Reset() {
	*x = UpdateServerNamesAuditingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerNamesAuditingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerNamesAuditingRequest) ProtoMessage() {}

func (x *UpdateServerNamesAuditingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerNamesAuditingRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerNamesAuditingRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateServerNamesAuditingRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerNamesAuditingRequest) GetAuditingResult() *ServerNameAuditingResult {
	if x != nil {
		return x.AuditingResult
	}
	return nil
}

// 修改服务的DNS相关设置
type UpdateServerDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId     int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	SupportCNAME bool  `protobuf:"varint,2,opt,name=supportCNAME,proto3" json:"supportCNAME,omitempty"`
}

func (x *UpdateServerDNSRequest) Reset() {
	*x = UpdateServerDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDNSRequest) ProtoMessage() {}

func (x *UpdateServerDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDNSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerDNSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateServerDNSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerDNSRequest) GetSupportCNAME() bool {
	if x != nil {
		return x.SupportCNAME
	}
	return false
}

// 重新生成CNAME
type RegenerateServerDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *RegenerateServerDNSNameRequest) Reset() {
	*x = RegenerateServerDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateServerDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateServerDNSNameRequest) ProtoMessage() {}

func (x *RegenerateServerDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateServerDNSNameRequest.ProtoReflect.Descriptor instead.
func (*RegenerateServerDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{18}
}

func (x *RegenerateServerDNSNameRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 修改服务的CNAME
type UpdateServerDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DnsName  string `protobuf:"bytes,2,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *UpdateServerDNSNameRequest) Reset() {
	*x = UpdateServerDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerDNSNameRequest) ProtoMessage() {}

func (x *UpdateServerDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerDNSNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateServerDNSNameRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerDNSNameRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

// 使用CNAME查找服务
type FindServerIdWithDNSNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64  `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	DnsName       string `protobuf:"bytes,2,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *FindServerIdWithDNSNameRequest) Reset() {
	*x = FindServerIdWithDNSNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerIdWithDNSNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerIdWithDNSNameRequest) ProtoMessage() {}

func (x *FindServerIdWithDNSNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerIdWithDNSNameRequest.ProtoReflect.Descriptor instead.
func (*FindServerIdWithDNSNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{20}
}

func (x *FindServerIdWithDNSNameRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *FindServerIdWithDNSNameRequest) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

type FindServerIdWithDNSNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerIdWithDNSNameResponse) Reset() {
	*x = FindServerIdWithDNSNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerIdWithDNSNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerIdWithDNSNameResponse) ProtoMessage() {}

func (x *FindServerIdWithDNSNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerIdWithDNSNameResponse.ProtoReflect.Descriptor instead.
func (*FindServerIdWithDNSNameResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{21}
}

func (x *FindServerIdWithDNSNameResponse) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 计算服务数量
type CountAllEnabledServersMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroupId  int64  `protobuf:"varint,1,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"` // 服务分组ID，如果为-1表示查找未分组
	Keyword        string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty"`
	UserId         int64  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	NodeClusterId  int64  `protobuf:"varint,4,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	AuditingFlag   int32  `protobuf:"varint,5,opt,name=auditingFlag,proto3" json:"auditingFlag,omitempty"`
	ProtocolFamily string `protobuf:"bytes,6,opt,name=protocolFamily,proto3" json:"protocolFamily,omitempty"`
}

func (x *CountAllEnabledServersMatchRequest) Reset() {
	*x = CountAllEnabledServersMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersMatchRequest) ProtoMessage() {}

func (x *CountAllEnabledServersMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersMatchRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{22}
}

func (x *CountAllEnabledServersMatchRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CountAllEnabledServersMatchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetAuditingFlag() int32 {
	if x != nil {
		return x.AuditingFlag
	}
	return 0
}

func (x *CountAllEnabledServersMatchRequest) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

// 列出单页服务
type ListEnabledServersMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset            int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size              int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	ServerGroupId     int64  `protobuf:"varint,3,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"` // 服务分组ID，如果为-1表示查找未分组
	Keyword           string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	UserId            int64  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	NodeClusterId     int64  `protobuf:"varint,6,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	AuditingFlag      int32  `protobuf:"varint,7,opt,name=auditingFlag,proto3" json:"auditingFlag,omitempty"`
	ProtocolFamily    string `protobuf:"bytes,8,opt,name=protocolFamily,proto3" json:"protocolFamily,omitempty"`
	TrafficOutAsc     bool   `protobuf:"varint,9,opt,name=trafficOutAsc,proto3" json:"trafficOutAsc,omitempty"`
	TrafficOutDesc    bool   `protobuf:"varint,10,opt,name=trafficOutDesc,proto3" json:"trafficOutDesc,omitempty"`
	IgnoreServerNames bool   `protobuf:"varint,11,opt,name=ignoreServerNames,proto3" json:"ignoreServerNames,omitempty"` // 忽略域名
	IgnoreSSLCerts    bool   `protobuf:"varint,12,opt,name=ignoreSSLCerts,proto3" json:"ignoreSSLCerts,omitempty"`       // 忽略证书
}

func (x *ListEnabledServersMatchRequest) Reset() {
	*x = ListEnabledServersMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledServersMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledServersMatchRequest) ProtoMessage() {}

func (x *ListEnabledServersMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledServersMatchRequest.ProtoReflect.Descriptor instead.
func (*ListEnabledServersMatchRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{23}
}

func (x *ListEnabledServersMatchRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEnabledServersMatchRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetAuditingFlag() int32 {
	if x != nil {
		return x.AuditingFlag
	}
	return 0
}

func (x *ListEnabledServersMatchRequest) GetProtocolFamily() string {
	if x != nil {
		return x.ProtocolFamily
	}
	return ""
}

func (x *ListEnabledServersMatchRequest) GetTrafficOutAsc() bool {
	if x != nil {
		return x.TrafficOutAsc
	}
	return false
}

func (x *ListEnabledServersMatchRequest) GetTrafficOutDesc() bool {
	if x != nil {
		return x.TrafficOutDesc
	}
	return false
}

func (x *ListEnabledServersMatchRequest) GetIgnoreServerNames() bool {
	if x != nil {
		return x.IgnoreServerNames
	}
	return false
}

func (x *ListEnabledServersMatchRequest) GetIgnoreSSLCerts() bool {
	if x != nil {
		return x.IgnoreSSLCerts
	}
	return false
}

type ListEnabledServersMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *ListEnabledServersMatchResponse) Reset() {
	*x = ListEnabledServersMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnabledServersMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnabledServersMatchResponse) ProtoMessage() {}

func (x *ListEnabledServersMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnabledServersMatchResponse.ProtoReflect.Descriptor instead.
func (*ListEnabledServersMatchResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{24}
}

func (x *ListEnabledServersMatchResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 禁用服务
type DeleteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *DeleteServerRequest) Reset() {
	*x = DeleteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerRequest) ProtoMessage() {}

func (x *DeleteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 查找单个服务
type FindEnabledServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId       int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`             // 服务ID
	IgnoreSSLCerts bool  `protobuf:"varint,2,opt,name=ignoreSSLCerts,proto3" json:"ignoreSSLCerts,omitempty"` // 忽略SSL证书数据
}

func (x *FindEnabledServerRequest) Reset() {
	*x = FindEnabledServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerRequest) ProtoMessage() {}

func (x *FindEnabledServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{26}
}

func (x *FindEnabledServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *FindEnabledServerRequest) GetIgnoreSSLCerts() bool {
	if x != nil {
		return x.IgnoreSSLCerts
	}
	return false
}

type FindEnabledServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *FindEnabledServerResponse) Reset() {
	*x = FindEnabledServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerResponse) ProtoMessage() {}

func (x *FindEnabledServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{27}
}

func (x *FindEnabledServerResponse) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

// 查找服务配置
type FindEnabledServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerConfigRequest) Reset() {
	*x = FindEnabledServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerConfigRequest) ProtoMessage() {}

func (x *FindEnabledServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerConfigRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{28}
}

func (x *FindEnabledServerConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerJSON []byte `protobuf:"bytes,1,opt,name=serverJSON,proto3" json:"serverJSON,omitempty"`
}

func (x *FindEnabledServerConfigResponse) Reset() {
	*x = FindEnabledServerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerConfigResponse) ProtoMessage() {}

func (x *FindEnabledServerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerConfigResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{29}
}

func (x *FindEnabledServerConfigResponse) GetServerJSON() []byte {
	if x != nil {
		return x.ServerJSON
	}
	return nil
}

// 查找服务的服务类型
type FindEnabledServerTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerTypeRequest) Reset() {
	*x = FindEnabledServerTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTypeRequest) ProtoMessage() {}

func (x *FindEnabledServerTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTypeRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTypeRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{30}
}

func (x *FindEnabledServerTypeRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FindEnabledServerTypeResponse) Reset() {
	*x = FindEnabledServerTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTypeResponse) ProtoMessage() {}

func (x *FindEnabledServerTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTypeResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTypeResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{31}
}

func (x *FindEnabledServerTypeResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 查找反向代理设置
type FindAndInitServerReverseProxyConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindAndInitServerReverseProxyConfigRequest) Reset() {
	*x = FindAndInitServerReverseProxyConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerReverseProxyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerReverseProxyConfigRequest) ProtoMessage() {}

func (x *FindAndInitServerReverseProxyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerReverseProxyConfigRequest.ProtoReflect.Descriptor instead.
func (*FindAndInitServerReverseProxyConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{32}
}

func (x *FindAndInitServerReverseProxyConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindAndInitServerReverseProxyConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReverseProxyJSON    []byte `protobuf:"bytes,1,opt,name=reverseProxyJSON,proto3" json:"reverseProxyJSON,omitempty"`
	ReverseProxyRefJSON []byte `protobuf:"bytes,2,opt,name=reverseProxyRefJSON,proto3" json:"reverseProxyRefJSON,omitempty"`
}

func (x *FindAndInitServerReverseProxyConfigResponse) Reset() {
	*x = FindAndInitServerReverseProxyConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerReverseProxyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerReverseProxyConfigResponse) ProtoMessage() {}

func (x *FindAndInitServerReverseProxyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerReverseProxyConfigResponse.ProtoReflect.Descriptor instead.
func (*FindAndInitServerReverseProxyConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{33}
}

func (x *FindAndInitServerReverseProxyConfigResponse) GetReverseProxyJSON() []byte {
	if x != nil {
		return x.ReverseProxyJSON
	}
	return nil
}

func (x *FindAndInitServerReverseProxyConfigResponse) GetReverseProxyRefJSON() []byte {
	if x != nil {
		return x.ReverseProxyRefJSON
	}
	return nil
}

// 初始化Web设置
type FindAndInitServerWebConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindAndInitServerWebConfigRequest) Reset() {
	*x = FindAndInitServerWebConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerWebConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerWebConfigRequest) ProtoMessage() {}

func (x *FindAndInitServerWebConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerWebConfigRequest.ProtoReflect.Descriptor instead.
func (*FindAndInitServerWebConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{34}
}

func (x *FindAndInitServerWebConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindAndInitServerWebConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebJSON []byte `protobuf:"bytes,1,opt,name=webJSON,proto3" json:"webJSON,omitempty"`
}

func (x *FindAndInitServerWebConfigResponse) Reset() {
	*x = FindAndInitServerWebConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAndInitServerWebConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAndInitServerWebConfigResponse) ProtoMessage() {}

func (x *FindAndInitServerWebConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAndInitServerWebConfigResponse.ProtoReflect.Descriptor instead.
func (*FindAndInitServerWebConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{35}
}

func (x *FindAndInitServerWebConfigResponse) GetWebJSON() []byte {
	if x != nil {
		return x.WebJSON
	}
	return nil
}

// 计算使用某个国密证书的服务数量
type CountAllEnabledServersWithGMCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GmCertId int64 `protobuf:"varint,1,opt,name=gmCertId,proto3" json:"gmCertId,omitempty"`
}

func (x *CountAllEnabledServersWithGMCertIdRequest) Reset() {
	*x = CountAllEnabledServersWithGMCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithGMCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithGMCertIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithGMCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithGMCertIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithGMCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{36}
}

func (x *CountAllEnabledServersWithGMCertIdRequest) GetGmCertId() int64 {
	if x != nil {
		return x.GmCertId
	}
	return 0
}

// 查找使用某个国密证书的所有服务
type FindAllEnabledServersWithGMCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GmCertId int64 `protobuf:"varint,1,opt,name=gmCertId,proto3" json:"gmCertId,omitempty"`
}

func (x *FindAllEnabledServersWithGMCertIdRequest) Reset() {
	*x = FindAllEnabledServersWithGMCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithGMCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithGMCertIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServersWithGMCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithGMCertIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithGMCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{37}
}

func (x *FindAllEnabledServersWithGMCertIdRequest) GetGmCertId() int64 {
	if x != nil {
		return x.GmCertId
	}
	return 0
}

type FindAllEnabledServersWithGMCertIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindAllEnabledServersWithGMCertIdResponse) Reset() {
	*x = FindAllEnabledServersWithGMCertIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithGMCertIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithGMCertIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServersWithGMCertIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithGMCertIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithGMCertIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{38}
}

func (x *FindAllEnabledServersWithGMCertIdResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 计算使用某个SSL证书的服务数量
type CountAllEnabledServersWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) Reset() {
	*x = CountAllEnabledServersWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithSSLCertIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{39}
}

func (x *CountAllEnabledServersWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

// 查找使用某个SSL证书的所有服务
type FindAllEnabledServersWithSSLCertIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SslCertId int64 `protobuf:"varint,1,opt,name=sslCertId,proto3" json:"sslCertId,omitempty"`
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) Reset() {
	*x = FindAllEnabledServersWithSSLCertIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithSSLCertIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServersWithSSLCertIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithSSLCertIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithSSLCertIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{40}
}

func (x *FindAllEnabledServersWithSSLCertIdRequest) GetSslCertId() int64 {
	if x != nil {
		return x.SslCertId
	}
	return 0
}

type FindAllEnabledServersWithSSLCertIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) Reset() {
	*x = FindAllEnabledServersWithSSLCertIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersWithSSLCertIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServersWithSSLCertIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersWithSSLCertIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersWithSSLCertIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{41}
}

func (x *FindAllEnabledServersWithSSLCertIdResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 计算运行在某个集群上的所有服务数量
type CountAllEnabledServersWithNodeClusterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) Reset() {
	*x = CountAllEnabledServersWithNodeClusterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithNodeClusterIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithNodeClusterIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithNodeClusterIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{42}
}

func (x *CountAllEnabledServersWithNodeClusterIdRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

// 计算使用某个分组的服务数量
type CountAllEnabledServersWithServerGroupIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerGroupId int64 `protobuf:"varint,1,opt,name=serverGroupId,proto3" json:"serverGroupId,omitempty"`
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) Reset() {
	*x = CountAllEnabledServersWithServerGroupIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllEnabledServersWithServerGroupIdRequest) ProtoMessage() {}

func (x *CountAllEnabledServersWithServerGroupIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllEnabledServersWithServerGroupIdRequest.ProtoReflect.Descriptor instead.
func (*CountAllEnabledServersWithServerGroupIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{43}
}

func (x *CountAllEnabledServersWithServerGroupIdRequest) GetServerGroupId() int64 {
	if x != nil {
		return x.ServerGroupId
	}
	return 0
}

// 通知更新
type NotifyServersChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyServersChangeRequest) Reset() {
	*x = NotifyServersChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServersChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServersChangeRequest) ProtoMessage() {}

func (x *NotifyServersChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServersChangeRequest.ProtoReflect.Descriptor instead.
func (*NotifyServersChangeRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{44}
}

type NotifyServersChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyServersChangeResponse) Reset() {
	*x = NotifyServersChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyServersChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyServersChangeResponse) ProtoMessage() {}

func (x *NotifyServersChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyServersChangeResponse.ProtoReflect.Descriptor instead.
func (*NotifyServersChangeResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{45}
}

// 取得某个集群下的所有服务相关的DNS
type FindAllEnabledServersDNSWithNodeClusterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId int64 `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) Reset() {
	*x = FindAllEnabledServersDNSWithNodeClusterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersDNSWithNodeClusterIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersDNSWithNodeClusterIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersDNSWithNodeClusterIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{46}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

type FindAllEnabledServersDNSWithNodeClusterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*ServerDNSInfo `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) Reset() {
	*x = FindAllEnabledServersDNSWithNodeClusterIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServersDNSWithNodeClusterIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServersDNSWithNodeClusterIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServersDNSWithNodeClusterIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{47}
}

func (x *FindAllEnabledServersDNSWithNodeClusterIdResponse) GetServers() []*ServerDNSInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

type ServerDNSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DnsName string `protobuf:"bytes,3,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
}

func (x *ServerDNSInfo) Reset() {
	*x = ServerDNSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerDNSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerDNSInfo) ProtoMessage() {}

func (x *ServerDNSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerDNSInfo.ProtoReflect.Descriptor instead.
func (*ServerDNSInfo) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{48}
}

func (x *ServerDNSInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ServerDNSInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServerDNSInfo) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

// 查找单个服务的DNS信息
type FindEnabledServerDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerDNSRequest) Reset() {
	*x = FindEnabledServerDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerDNSRequest) ProtoMessage() {}

func (x *FindEnabledServerDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerDNSRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerDNSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{49}
}

func (x *FindEnabledServerDNSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsName      string     `protobuf:"bytes,1,opt,name=dnsName,proto3" json:"dnsName,omitempty"`
	Domain       *DNSDomain `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	SupportCNAME bool       `protobuf:"varint,3,opt,name=supportCNAME,proto3" json:"supportCNAME,omitempty"`
}

func (x *FindEnabledServerDNSResponse) Reset() {
	*x = FindEnabledServerDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerDNSResponse) ProtoMessage() {}

func (x *FindEnabledServerDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerDNSResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerDNSResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{50}
}

func (x *FindEnabledServerDNSResponse) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *FindEnabledServerDNSResponse) GetDomain() *DNSDomain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *FindEnabledServerDNSResponse) GetSupportCNAME() bool {
	if x != nil {
		return x.SupportCNAME
	}
	return false
}

// 检查服务是否属于某个用户
type CheckUserServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *CheckUserServerRequest) Reset() {
	*x = CheckUserServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserServerRequest) ProtoMessage() {}

func (x *CheckUserServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserServerRequest.ProtoReflect.Descriptor instead.
func (*CheckUserServerRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{51}
}

func (x *CheckUserServerRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// 查找一个用户下的所有域名列表
type FindAllEnabledServerNamesWithUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) Reset() {
	*x = FindAllEnabledServerNamesWithUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerNamesWithUserIdRequest) ProtoMessage() {}

func (x *FindAllEnabledServerNamesWithUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerNamesWithUserIdRequest.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerNamesWithUserIdRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{52}
}

func (x *FindAllEnabledServerNamesWithUserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllEnabledServerNamesWithUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNames []string `protobuf:"bytes,1,rep,name=serverNames,proto3" json:"serverNames,omitempty"`
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) Reset() {
	*x = FindAllEnabledServerNamesWithUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllEnabledServerNamesWithUserIdResponse) ProtoMessage() {}

func (x *FindAllEnabledServerNamesWithUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllEnabledServerNamesWithUserIdResponse.ProtoReflect.Descriptor instead.
func (*FindAllEnabledServerNamesWithUserIdResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{53}
}

func (x *FindAllEnabledServerNamesWithUserIdResponse) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

// 查找一个用户下的所有服务
type FindAllUserServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *FindAllUserServersRequest) Reset() {
	*x = FindAllUserServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllUserServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllUserServersRequest) ProtoMessage() {}

func (x *FindAllUserServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllUserServersRequest.ProtoReflect.Descriptor instead.
func (*FindAllUserServersRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{54}
}

func (x *FindAllUserServersRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type FindAllUserServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"` // 只返回一些简要信息
}

func (x *FindAllUserServersResponse) Reset() {
	*x = FindAllUserServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAllUserServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAllUserServersResponse) ProtoMessage() {}

func (x *FindAllUserServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAllUserServersResponse.ProtoReflect.Descriptor instead.
func (*FindAllUserServersResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{55}
}

func (x *FindAllUserServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 查找某个用户下的服务配置
type ComposeAllUserServersConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ComposeAllUserServersConfigRequest) Reset() {
	*x = ComposeAllUserServersConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeAllUserServersConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeAllUserServersConfigRequest) ProtoMessage() {}

func (x *ComposeAllUserServersConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeAllUserServersConfigRequest.ProtoReflect.Descriptor instead.
func (*ComposeAllUserServersConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{56}
}

func (x *ComposeAllUserServersConfigRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ComposeAllUserServersConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServersConfigJSON []byte `protobuf:"bytes,1,opt,name=serversConfigJSON,proto3" json:"serversConfigJSON,omitempty"` // [server config1, server config2, ...]
}

func (x *ComposeAllUserServersConfigResponse) Reset() {
	*x = ComposeAllUserServersConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeAllUserServersConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeAllUserServersConfigResponse) ProtoMessage() {}

func (x *ComposeAllUserServersConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeAllUserServersConfigResponse.ProtoReflect.Descriptor instead.
func (*ComposeAllUserServersConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{57}
}

func (x *ComposeAllUserServersConfigResponse) GetServersConfigJSON() []byte {
	if x != nil {
		return x.ServersConfigJSON
	}
	return nil
}

// 查找用户服务基本信息
type FindEnabledUserServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledUserServerBasicRequest) Reset() {
	*x = FindEnabledUserServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserServerBasicRequest) ProtoMessage() {}

func (x *FindEnabledUserServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserServerBasicRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledUserServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{58}
}

func (x *FindEnabledUserServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledUserServerBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *FindEnabledUserServerBasicResponse) Reset() {
	*x = FindEnabledUserServerBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledUserServerBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledUserServerBasicResponse) ProtoMessage() {}

func (x *FindEnabledUserServerBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledUserServerBasicResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledUserServerBasicResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{59}
}

func (x *FindEnabledUserServerBasicResponse) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

// 修改用户服务基本信息
type UpdateEnabledUserServerBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateEnabledUserServerBasicRequest) Reset() {
	*x = UpdateEnabledUserServerBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnabledUserServerBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnabledUserServerBasicRequest) ProtoMessage() {}

func (x *UpdateEnabledUserServerBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnabledUserServerBasicRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnabledUserServerBasicRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateEnabledUserServerBasicRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateEnabledUserServerBasicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 上传HTTP请求待统计数据
type UploadServerHTTPRequestStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month                  string                                                      `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	Day                    string                                                      `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`
	RegionCities           []*UploadServerHTTPRequestStatRequest_RegionCity            `protobuf:"bytes,3,rep,name=regionCities,proto3" json:"regionCities,omitempty"`
	RegionProviders        []*UploadServerHTTPRequestStatRequest_RegionProvider        `protobuf:"bytes,4,rep,name=regionProviders,proto3" json:"regionProviders,omitempty"`
	Systems                []*UploadServerHTTPRequestStatRequest_System                `protobuf:"bytes,5,rep,name=systems,proto3" json:"systems,omitempty"`
	Browsers               []*UploadServerHTTPRequestStatRequest_Browser               `protobuf:"bytes,6,rep,name=browsers,proto3" json:"browsers,omitempty"`
	HttpFirewallRuleGroups []*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup `protobuf:"bytes,7,rep,name=httpFirewallRuleGroups,proto3" json:"httpFirewallRuleGroups,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest) Reset() {
	*x = UploadServerHTTPRequestStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61}
}

func (x *UploadServerHTTPRequestStatRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest) GetRegionCities() []*UploadServerHTTPRequestStatRequest_RegionCity {
	if x != nil {
		return x.RegionCities
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetRegionProviders() []*UploadServerHTTPRequestStatRequest_RegionProvider {
	if x != nil {
		return x.RegionProviders
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetSystems() []*UploadServerHTTPRequestStatRequest_System {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetBrowsers() []*UploadServerHTTPRequestStatRequest_Browser {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *UploadServerHTTPRequestStatRequest) GetHttpFirewallRuleGroups() []*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup {
	if x != nil {
		return x.HttpFirewallRuleGroups
	}
	return nil
}

// 检查域名是否已经存在
type CheckServerNameDuplicationInNodeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeClusterId   int64    `protobuf:"varint,1,opt,name=nodeClusterId,proto3" json:"nodeClusterId,omitempty"`
	ServerNames     []string `protobuf:"bytes,2,rep,name=serverNames,proto3" json:"serverNames,omitempty"`          // 可以同时检查一批域名
	ExcludeServerId int64    `protobuf:"varint,3,opt,name=excludeServerId,proto3" json:"excludeServerId,omitempty"` // 要排除的服务ID
	SupportWildcard bool     `protobuf:"varint,4,opt,name=supportWildcard,proto3" json:"supportWildcard,omitempty"` // 支持泛解析
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) Reset() {
	*x = CheckServerNameDuplicationInNodeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerNameDuplicationInNodeClusterRequest) ProtoMessage() {}

func (x *CheckServerNameDuplicationInNodeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerNameDuplicationInNodeClusterRequest.ProtoReflect.Descriptor instead.
func (*CheckServerNameDuplicationInNodeClusterRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{62}
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetNodeClusterId() int64 {
	if x != nil {
		return x.NodeClusterId
	}
	return 0
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetExcludeServerId() int64 {
	if x != nil {
		return x.ExcludeServerId
	}
	return 0
}

func (x *CheckServerNameDuplicationInNodeClusterRequest) GetSupportWildcard() bool {
	if x != nil {
		return x.SupportWildcard
	}
	return false
}

type CheckServerNameDuplicationInNodeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicatedServerNames []string `protobuf:"bytes,1,rep,name=duplicatedServerNames,proto3" json:"duplicatedServerNames,omitempty"`
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) Reset() {
	*x = CheckServerNameDuplicationInNodeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckServerNameDuplicationInNodeClusterResponse) ProtoMessage() {}

func (x *CheckServerNameDuplicationInNodeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckServerNameDuplicationInNodeClusterResponse.ProtoReflect.Descriptor instead.
func (*CheckServerNameDuplicationInNodeClusterResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{63}
}

func (x *CheckServerNameDuplicationInNodeClusterResponse) GetDuplicatedServerNames() []string {
	if x != nil {
		return x.DuplicatedServerNames
	}
	return nil
}

// 查找最近访问的服务
type FindLatestServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FindLatestServersRequest) Reset() {
	*x = FindLatestServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServersRequest) ProtoMessage() {}

func (x *FindLatestServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServersRequest.ProtoReflect.Descriptor instead.
func (*FindLatestServersRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{64}
}

func (x *FindLatestServersRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FindLatestServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindLatestServersResponse) Reset() {
	*x = FindLatestServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindLatestServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLatestServersResponse) ProtoMessage() {}

func (x *FindLatestServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLatestServersResponse.ProtoReflect.Descriptor instead.
func (*FindLatestServersResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{65}
}

func (x *FindLatestServersResponse) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

// 查找某个服务附近的服务
type FindNearbyServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindNearbyServersRequest) Reset() {
	*x = FindNearbyServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersRequest) ProtoMessage() {}

func (x *FindNearbyServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersRequest.ProtoReflect.Descriptor instead.
func (*FindNearbyServersRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{66}
}

func (x *FindNearbyServersRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindNearbyServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope  string                                 `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"` // 范围 cluster|group
	Groups []*FindNearbyServersResponse_GroupInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *FindNearbyServersResponse) Reset() {
	*x = FindNearbyServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersResponse) ProtoMessage() {}

func (x *FindNearbyServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersResponse.ProtoReflect.Descriptor instead.
func (*FindNearbyServersResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{67}
}

func (x *FindNearbyServersResponse) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *FindNearbyServersResponse) GetGroups() []*FindNearbyServersResponse_GroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

// 清除缓存
type PurgeServerCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys        []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Prefixes    []string `protobuf:"bytes,3,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"` // 任务描述
}

func (x *PurgeServerCacheRequest) Reset() {
	*x = PurgeServerCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeServerCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeServerCacheRequest) ProtoMessage() {}

func (x *PurgeServerCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeServerCacheRequest.ProtoReflect.Descriptor instead.
func (*PurgeServerCacheRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{68}
}

func (x *PurgeServerCacheRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PurgeServerCacheRequest) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *PurgeServerCacheRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PurgeServerCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk    bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PurgeServerCacheResponse) Reset() {
	*x = PurgeServerCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeServerCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeServerCacheResponse) ProtoMessage() {}

func (x *PurgeServerCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeServerCacheResponse.ProtoReflect.Descriptor instead.
func (*PurgeServerCacheResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{69}
}

func (x *PurgeServerCacheResponse) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *PurgeServerCacheResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查找流量限制
type FindEnabledServerTrafficLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerTrafficLimitRequest) Reset() {
	*x = FindEnabledServerTrafficLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTrafficLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTrafficLimitRequest) ProtoMessage() {}

func (x *FindEnabledServerTrafficLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTrafficLimitRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTrafficLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{70}
}

func (x *FindEnabledServerTrafficLimitRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerTrafficLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrafficLimitJSON []byte `protobuf:"bytes,1,opt,name=trafficLimitJSON,proto3" json:"trafficLimitJSON,omitempty"`
}

func (x *FindEnabledServerTrafficLimitResponse) Reset() {
	*x = FindEnabledServerTrafficLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerTrafficLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerTrafficLimitResponse) ProtoMessage() {}

func (x *FindEnabledServerTrafficLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerTrafficLimitResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerTrafficLimitResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{71}
}

func (x *FindEnabledServerTrafficLimitResponse) GetTrafficLimitJSON() []byte {
	if x != nil {
		return x.TrafficLimitJSON
	}
	return nil
}

// 设置流量限制
type UpdateServerTrafficLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId         int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	TrafficLimitJSON []byte `protobuf:"bytes,2,opt,name=trafficLimitJSON,proto3" json:"trafficLimitJSON,omitempty"`
}

func (x *UpdateServerTrafficLimitRequest) Reset() {
	*x = UpdateServerTrafficLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerTrafficLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerTrafficLimitRequest) ProtoMessage() {}

func (x *UpdateServerTrafficLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerTrafficLimitRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerTrafficLimitRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateServerTrafficLimitRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerTrafficLimitRequest) GetTrafficLimitJSON() []byte {
	if x != nil {
		return x.TrafficLimitJSON
	}
	return nil
}

// 修改服务套餐
type UpdateServerUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId   int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UserPlanId int64 `protobuf:"varint,2,opt,name=userPlanId,proto3" json:"userPlanId,omitempty"`
}

func (x *UpdateServerUserPlanRequest) Reset() {
	*x = UpdateServerUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUserPlanRequest) ProtoMessage() {}

func (x *UpdateServerUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUserPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateServerUserPlanRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUserPlanRequest) GetUserPlanId() int64 {
	if x != nil {
		return x.UserPlanId
	}
	return 0
}

// 获取服务套餐信息
type FindServerUserPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindServerUserPlanRequest) Reset() {
	*x = FindServerUserPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerUserPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerUserPlanRequest) ProtoMessage() {}

func (x *FindServerUserPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerUserPlanRequest.ProtoReflect.Descriptor instead.
func (*FindServerUserPlanRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{74}
}

func (x *FindServerUserPlanRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindServerUserPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPlan *UserPlan `protobuf:"bytes,1,opt,name=userPlan,proto3" json:"userPlan,omitempty"`
}

func (x *FindServerUserPlanResponse) Reset() {
	*x = FindServerUserPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindServerUserPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindServerUserPlanResponse) ProtoMessage() {}

func (x *FindServerUserPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindServerUserPlanResponse.ProtoReflect.Descriptor instead.
func (*FindServerUserPlanResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{75}
}

func (x *FindServerUserPlanResponse) GetUserPlan() *UserPlan {
	if x != nil {
		return x.UserPlan
	}
	return nil
}

// 获取服务配置
type ComposeServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *ComposeServerConfigRequest) Reset() {
	*x = ComposeServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerConfigRequest) ProtoMessage() {}

func (x *ComposeServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerConfigRequest.ProtoReflect.Descriptor instead.
func (*ComposeServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{76}
}

func (x *ComposeServerConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type ComposeServerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerConfigJSON []byte `protobuf:"bytes,1,opt,name=serverConfigJSON,proto3" json:"serverConfigJSON,omitempty"`
}

func (x *ComposeServerConfigResponse) Reset() {
	*x = ComposeServerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeServerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeServerConfigResponse) ProtoMessage() {}

func (x *ComposeServerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeServerConfigResponse.ProtoReflect.Descriptor instead.
func (*ComposeServerConfigResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{77}
}

func (x *ComposeServerConfigResponse) GetServerConfigJSON() []byte {
	if x != nil {
		return x.ServerConfigJSON
	}
	return nil
}

// 修改服务CRS设置
type UpdateServerCRSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	CrsJSON  []byte `protobuf:"bytes,2,opt,name=crsJSON,proto3" json:"crsJSON,omitempty"`
}

func (x *UpdateServerCRSRequest) Reset() {
	*x = UpdateServerCRSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerCRSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerCRSRequest) ProtoMessage() {}

func (x *UpdateServerCRSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerCRSRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerCRSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateServerCRSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerCRSRequest) GetCrsJSON() []byte {
	if x != nil {
		return x.CrsJSON
	}
	return nil
}

// 查找服务CRS设置
type FindEnabledServerCRSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerCRSRequest) Reset() {
	*x = FindEnabledServerCRSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerCRSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerCRSRequest) ProtoMessage() {}

func (x *FindEnabledServerCRSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerCRSRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerCRSRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{79}
}

func (x *FindEnabledServerCRSRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerCRSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrsJSON []byte `protobuf:"bytes,1,opt,name=crsJSON,proto3" json:"crsJSON,omitempty"`
}

func (x *FindEnabledServerCRSResponse) Reset() {
	*x = FindEnabledServerCRSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerCRSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerCRSResponse) ProtoMessage() {}

func (x *FindEnabledServerCRSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerCRSResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerCRSResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{80}
}

func (x *FindEnabledServerCRSResponse) GetCrsJSON() []byte {
	if x != nil {
		return x.CrsJSON
	}
	return nil
}

// 修改服务UAM设置
type UpdateServerUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UamJSON  []byte `protobuf:"bytes,2,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *UpdateServerUAMRequest) Reset() {
	*x = UpdateServerUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUAMRequest) ProtoMessage() {}

func (x *UpdateServerUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUAMRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateServerUAMRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUAMRequest) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 查找服务UAM设置
type FindEnabledServerUAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (x *FindEnabledServerUAMRequest) Reset() {
	*x = FindEnabledServerUAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerUAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerUAMRequest) ProtoMessage() {}

func (x *FindEnabledServerUAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerUAMRequest.ProtoReflect.Descriptor instead.
func (*FindEnabledServerUAMRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{82}
}

func (x *FindEnabledServerUAMRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

type FindEnabledServerUAMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UamJSON []byte `protobuf:"bytes,1,opt,name=uamJSON,proto3" json:"uamJSON,omitempty"`
}

func (x *FindEnabledServerUAMResponse) Reset() {
	*x = FindEnabledServerUAMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindEnabledServerUAMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindEnabledServerUAMResponse) ProtoMessage() {}

func (x *FindEnabledServerUAMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindEnabledServerUAMResponse.ProtoReflect.Descriptor instead.
func (*FindEnabledServerUAMResponse) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{83}
}

func (x *FindEnabledServerUAMResponse) GetUamJSON() []byte {
	if x != nil {
		return x.UamJSON
	}
	return nil
}

// 修改服务所属用户
type UpdateServerUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	UserId   int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UpdateServerUserRequest) Reset() {
	*x = UpdateServerUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerUserRequest) ProtoMessage() {}

func (x *UpdateServerUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerUserRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateServerUserRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 修改服务名称
type UpdateServerNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"` // 服务ID
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`          // 服务名称
}

func (x *UpdateServerNameRequest) Reset() {
	*x = UpdateServerNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServerNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServerNameRequest) ProtoMessage() {}

func (x *UpdateServerNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServerNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateServerNameRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateServerNameRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UpdateServerNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 在服务之间复制配置
type CopyServerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId             int64   `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`                                // 被复制服务ID
	ConfigCode           string  `protobuf:"bytes,2,opt,name=configCode,proto3" json:"configCode,omitempty"`                             // 要拷贝的配置代号
	TargetType           string  `protobuf:"bytes,3,opt,name=targetType,proto3" json:"targetType,omitempty"`                             // 目标类型：servers, groups, cluster（当前集群下所有服务，只有管理员才有权限）、user（当前用户下所有服务）
	TargetServerIds      []int64 `protobuf:"varint,4,rep,packed,name=targetServerIds,proto3" json:"targetServerIds,omitempty"`           // 目标服务ID列表
	TargetServerGroupIds []int64 `protobuf:"varint,5,rep,packed,name=targetServerGroupIds,proto3" json:"targetServerGroupIds,omitempty"` // 目标服务分组ID列表
	TargetClusterId      int64   `protobuf:"varint,6,opt,name=targetClusterId,proto3" json:"targetClusterId,omitempty"`                  // 目标集群ID
	TargetUserId         int64   `protobuf:"varint,7,opt,name=targetUserId,proto3" json:"targetUserId,omitempty"`                        // 目标用户ID
}

func (x *CopyServerConfigRequest) Reset() {
	*x = CopyServerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyServerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyServerConfigRequest) ProtoMessage() {}

func (x *CopyServerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyServerConfigRequest.ProtoReflect.Descriptor instead.
func (*CopyServerConfigRequest) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{86}
}

func (x *CopyServerConfigRequest) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CopyServerConfigRequest) GetConfigCode() string {
	if x != nil {
		return x.ConfigCode
	}
	return ""
}

func (x *CopyServerConfigRequest) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

func (x *CopyServerConfigRequest) GetTargetServerIds() []int64 {
	if x != nil {
		return x.TargetServerIds
	}
	return nil
}

func (x *CopyServerConfigRequest) GetTargetServerGroupIds() []int64 {
	if x != nil {
		return x.TargetServerGroupIds
	}
	return nil
}

func (x *CopyServerConfigRequest) GetTargetClusterId() int64 {
	if x != nil {
		return x.TargetClusterId
	}
	return 0
}

func (x *CopyServerConfigRequest) GetTargetUserId() int64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_RegionCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId            int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	CountRequests       int64 `protobuf:"varint,5,opt,name=countRequests,proto3" json:"countRequests,omitempty"`
	Bytes               int64 `protobuf:"varint,6,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CountAttackRequests int64 `protobuf:"varint,7,opt,name=countAttackRequests,proto3" json:"countAttackRequests,omitempty"`
	AttackBytes         int64 `protobuf:"varint,8,opt,name=attackBytes,proto3" json:"attackBytes,omitempty"`
	CountryId           int64 `protobuf:"varint,9,opt,name=countryId,proto3" json:"countryId,omitempty"`
	ProvinceId          int64 `protobuf:"varint,10,opt,name=provinceId,proto3" json:"provinceId,omitempty"`
	CityId              int64 `protobuf:"varint,11,opt,name=cityId,proto3" json:"cityId,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) Reset() {
	*x = UploadServerHTTPRequestStatRequest_RegionCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_RegionCity) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_RegionCity.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_RegionCity) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61, 0}
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountRequests() int64 {
	if x != nil {
		return x.CountRequests
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountAttackRequests() int64 {
	if x != nil {
		return x.CountAttackRequests
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetAttackBytes() int64 {
	if x != nil {
		return x.AttackBytes
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionCity) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_RegionProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId   int64 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Count      int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	ProviderId int64 `protobuf:"varint,4,opt,name=providerId,proto3" json:"providerId,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) Reset() {
	*x = UploadServerHTTPRequestStatRequest_RegionProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_RegionProvider) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_RegionProvider.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_RegionProvider) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61, 1}
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_RegionProvider) GetProviderId() int64 {
	if x != nil {
		return x.ProviderId
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_System) Reset() {
	*x = UploadServerHTTPRequestStatRequest_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_System) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_System) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_System.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_System) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61, 2}
}

func (x *UploadServerHTTPRequestStatRequest_System) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_System) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_System) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_System) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_Browser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Count    int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_Browser) Reset() {
	*x = UploadServerHTTPRequestStatRequest_Browser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_Browser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_Browser) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_Browser) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_Browser.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_Browser) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61, 3}
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_Browser) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId                int64  `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	HttpFirewallRuleGroupId int64  `protobuf:"varint,2,opt,name=httpFirewallRuleGroupId,proto3" json:"httpFirewallRuleGroupId,omitempty"`
	Action                  string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Count                   int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) Reset() {
	*x = UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) ProtoMessage() {}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup.ProtoReflect.Descriptor instead.
func (*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{61, 4}
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetHttpFirewallRuleGroupId() int64 {
	if x != nil {
		return x.HttpFirewallRuleGroupId
	}
	return 0
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FindNearbyServersResponse_GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Servers []*Server `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *FindNearbyServersResponse_GroupInfo) Reset() {
	*x = FindNearbyServersResponse_GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_server_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearbyServersResponse_GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearbyServersResponse_GroupInfo) ProtoMessage() {}

func (x *FindNearbyServersResponse_GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_server_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearbyServersResponse_GroupInfo.ProtoReflect.Descriptor instead.
func (*FindNearbyServersResponse_GroupInfo) Descriptor() ([]byte, []int) {
	return file_service_server_proto_rawDescGZIP(), []int{67, 0}
}

func (x *FindNearbyServersResponse_GroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindNearbyServersResponse_GroupInfo) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

var File_service_server_proto protoreflect.FileDescriptor

var file_service_server_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x70, 0x63,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x05,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x4f, 0x4e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x4a, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a,
	0x53, 0x4f, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6c,
	0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f,
	0x4e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x65, 0x62, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x65, 0x62, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4a,
	0x53, 0x4f, 0x4e, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x22, 0x61, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73,
	0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x22, 0x51,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x63, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x6c, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x44, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x75, 0x64, 0x70, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4a, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x65, 0x62, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x34, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x17, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x60, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x84, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d, 0x45,
	0x22, 0x3c, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e,
	0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x22, 0xba, 0x03, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x41, 0x73, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74,
	0x41, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x22, 0x47, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x18, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22, 0x3f, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x3c,
	0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a, 0x53, 0x4f, 0x4e, 0x22,
	0x3a, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x48, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x2b, 0x46,
	0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x66, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x66, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3f, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x47, 0x0a, 0x29, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6d, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x6d, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47,
	0x4d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x29, 0x46, 0x69,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a,
	0x2a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x29, 0x46, 0x69, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x56, 0x0a, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x30, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e,
	0x53, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x4e, 0x41, 0x4d,
	0x45, 0x22, 0x34, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x2a, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x2b, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x33,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f,
	0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3f, 0x0a, 0x21, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x22, 0x46,
	0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x09, 0x0a,
	0x22, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x43, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x08,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x16, 0x68, 0x74, 0x74, 0x70,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x8e,
	0x02, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x1a,
	0x62, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x68, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x69, 0x0a,
	0x07, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x15, 0x48, 0x54, 0x54,
	0x50, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x68, 0x74, 0x74, 0x70, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x6c,
	0x64, 0x63, 0x61, 0x72, 0x64, 0x22, 0x67, 0x0a, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x2e,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x41,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x22, 0x36, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x45,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x4f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x24,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x69, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x53, 0x4f, 0x4e,
	0x22, 0x59, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x46,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x38, 0x0a, 0x1a,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x73, 0x4a, 0x53,
	0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x72, 0x73, 0x4a, 0x53, 0x4f,
	0x4e, 0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x72, 0x73, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x75,
	0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x39, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x38, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x75, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x4d, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x32, 0xcf, 0x28, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x47, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x73, 0x4f, 0x6e, 0x12, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x73, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x11,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x43, 0x50, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x43, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x4c,
	0x53, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x78, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x44,
	0x50, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x18,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x19,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x4e, 0x53, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d,
	0x0a, 0x17, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x1b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x66, 0x69, 0x6e, 0x64, 0x41,
	0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6e,
	0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x22,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65,
	0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47, 0x4d, 0x43, 0x65, 0x72, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x23, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2d,
	0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c,
	0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x53, 0x4c, 0x43,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x29, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e, 0x53, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x44, 0x4e,
	0x53, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44,
	0x4e, 0x53, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12,
	0x27, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50,
	0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x1b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x92, 0x01, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x4e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x52, 0x53, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x52, 0x53, 0x12, 0x1f, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x52, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41,
	0x4d, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a,
	0x14, 0x66, 0x69, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x41, 0x4d, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x41, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x6f,
	0x70, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x50, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_server_proto_rawDescOnce sync.Once
	file_service_server_proto_rawDescData = file_service_server_proto_rawDesc
)

func file_service_server_proto_rawDescGZIP() []byte {
	file_service_server_proto_rawDescOnce.Do(func() {
		file_service_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_server_proto_rawDescData)
	})
	return file_service_server_proto_rawDescData
}

var file_service_server_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_service_server_proto_goTypes = []interface{}{
	(*CreateServerRequest)(nil),                                      // 0: pb.CreateServerRequest
	(*CreateServerResponse)(nil),                                     // 1: pb.CreateServerResponse
	(*UpdateServerBasicRequest)(nil),                                 // 2: pb.UpdateServerBasicRequest
	(*UpdateServerGroupIdsRequest)(nil),                              // 3: pb.UpdateServerGroupIdsRequest
	(*UpdateServerIsOnRequest)(nil),                                  // 4: pb.UpdateServerIsOnRequest
	(*UpdateServerHTTPRequest)(nil),                                  // 5: pb.UpdateServerHTTPRequest
	(*UpdateServerHTTPSRequest)(nil),                                 // 6: pb.UpdateServerHTTPSRequest
	(*UpdateServerTCPRequest)(nil),                                   // 7: pb.UpdateServerTCPRequest
	(*UpdateServerTLSRequest)(nil),                                   // 8: pb.UpdateServerTLSRequest
	(*UpdateServerUnixRequest)(nil),                                  // 9: pb.UpdateServerUnixRequest
	(*UpdateServerUDPRequest)(nil),                                   // 10: pb.UpdateServerUDPRequest
	(*UpdateServerWebRequest)(nil),                                   // 11: pb.UpdateServerWebRequest
	(*UpdateServerReverseProxyRequest)(nil),                          // 12: pb.UpdateServerReverseProxyRequest
	(*FindServerNamesRequest)(nil),                                   // 13: pb.FindServerNamesRequest
	(*FindServerNamesResponse)(nil),                                  // 14: pb.FindServerNamesResponse
	(*UpdateServerNamesRequest)(nil),                                 // 15: pb.UpdateServerNamesRequest
	(*UpdateServerNamesAuditingRequest)(nil),                         // 16: pb.UpdateServerNamesAuditingRequest
	(*UpdateServerDNSRequest)(nil),                                   // 17: pb.UpdateServerDNSRequest
	(*RegenerateServerDNSNameRequest)(nil),                           // 18: pb.RegenerateServerDNSNameRequest
	(*UpdateServerDNSNameRequest)(nil),                               // 19: pb.UpdateServerDNSNameRequest
	(*FindServerIdWithDNSNameRequest)(nil),                           // 20: pb.FindServerIdWithDNSNameRequest
	(*FindServerIdWithDNSNameResponse)(nil),                          // 21: pb.FindServerIdWithDNSNameResponse
	(*CountAllEnabledServersMatchRequest)(nil),                       // 22: pb.CountAllEnabledServersMatchRequest
	(*ListEnabledServersMatchRequest)(nil),                           // 23: pb.ListEnabledServersMatchRequest
	(*ListEnabledServersMatchResponse)(nil),                          // 24: pb.ListEnabledServersMatchResponse
	(*DeleteServerRequest)(nil),                                      // 25: pb.DeleteServerRequest
	(*FindEnabledServerRequest)(nil),                                 // 26: pb.FindEnabledServerRequest
	(*FindEnabledServerResponse)(nil),                                // 27: pb.FindEnabledServerResponse
	(*FindEnabledServerConfigRequest)(nil),                           // 28: pb.FindEnabledServerConfigRequest
	(*FindEnabledServerConfigResponse)(nil),                          // 29: pb.FindEnabledServerConfigResponse
	(*FindEnabledServerTypeRequest)(nil),                             // 30: pb.FindEnabledServerTypeRequest
	(*FindEnabledServerTypeResponse)(nil),                            // 31: pb.FindEnabledServerTypeResponse
	(*FindAndInitServerReverseProxyConfigRequest)(nil),               // 32: pb.FindAndInitServerReverseProxyConfigRequest
	(*FindAndInitServerReverseProxyConfigResponse)(nil),              // 33: pb.FindAndInitServerReverseProxyConfigResponse
	(*FindAndInitServerWebConfigRequest)(nil),                        // 34: pb.FindAndInitServerWebConfigRequest
	(*FindAndInitServerWebConfigResponse)(nil),                       // 35: pb.FindAndInitServerWebConfigResponse
	(*CountAllEnabledServersWithGMCertIdRequest)(nil),                // 36: pb.CountAllEnabledServersWithGMCertIdRequest
	(*FindAllEnabledServersWithGMCertIdRequest)(nil),                 // 37: pb.FindAllEnabledServersWithGMCertIdRequest
	(*FindAllEnabledServersWithGMCertIdResponse)(nil),                // 38: pb.FindAllEnabledServersWithGMCertIdResponse
	(*CountAllEnabledServersWithSSLCertIdRequest)(nil),               // 39: pb.CountAllEnabledServersWithSSLCertIdRequest
	(*FindAllEnabledServersWithSSLCertIdRequest)(nil),                // 40: pb.FindAllEnabledServersWithSSLCertIdRequest
	(*FindAllEnabledServersWithSSLCertIdResponse)(nil),               // 41: pb.FindAllEnabledServersWithSSLCertIdResponse
	(*CountAllEnabledServersWithNodeClusterIdRequest)(nil),           // 42: pb.CountAllEnabledServersWithNodeClusterIdRequest
	(*CountAllEnabledServersWithServerGroupIdRequest)(nil),           // 43: pb.CountAllEnabledServersWithServerGroupIdRequest
	(*NotifyServersChangeRequest)(nil),                               // 44: pb.NotifyServersChangeRequest
	(*NotifyServersChangeResponse)(nil),                              // 45: pb.NotifyServersChangeResponse
	(*FindAllEnabledServersDNSWithNodeClusterIdRequest)(nil),         // 46: pb.FindAllEnabledServersDNSWithNodeClusterIdRequest
	(*FindAllEnabledServersDNSWithNodeClusterIdResponse)(nil),        // 47: pb.FindAllEnabledServersDNSWithNodeClusterIdResponse
	(*ServerDNSInfo)(nil),                                            // 48: pb.ServerDNSInfo
	(*FindEnabledServerDNSRequest)(nil),                              // 49: pb.FindEnabledServerDNSRequest
	(*FindEnabledServerDNSResponse)(nil),                             // 50: pb.FindEnabledServerDNSResponse
	(*CheckUserServerRequest)(nil),                                   // 51: pb.CheckUserServerRequest
	(*FindAllEnabledServerNamesWithUserIdRequest)(nil),               // 52: pb.FindAllEnabledServerNamesWithUserIdRequest
	(*FindAllEnabledServerNamesWithUserIdResponse)(nil),              // 53: pb.FindAllEnabledServerNamesWithUserIdResponse
	(*FindAllUserServersRequest)(nil),                                // 54: pb.FindAllUserServersRequest
	(*FindAllUserServersResponse)(nil),                               // 55: pb.FindAllUserServersResponse
	(*ComposeAllUserServersConfigRequest)(nil),                       // 56: pb.ComposeAllUserServersConfigRequest
	(*ComposeAllUserServersConfigResponse)(nil),                      // 57: pb.ComposeAllUserServersConfigResponse
	(*FindEnabledUserServerBasicRequest)(nil),                        // 58: pb.FindEnabledUserServerBasicRequest
	(*FindEnabledUserServerBasicResponse)(nil),                       // 59: pb.FindEnabledUserServerBasicResponse
	(*UpdateEnabledUserServerBasicRequest)(nil),                      // 60: pb.UpdateEnabledUserServerBasicRequest
	(*UploadServerHTTPRequestStatRequest)(nil),                       // 61: pb.UploadServerHTTPRequestStatRequest
	(*CheckServerNameDuplicationInNodeClusterRequest)(nil),           // 62: pb.CheckServerNameDuplicationInNodeClusterRequest
	(*CheckServerNameDuplicationInNodeClusterResponse)(nil),          // 63: pb.CheckServerNameDuplicationInNodeClusterResponse
	(*FindLatestServersRequest)(nil),                                 // 64: pb.FindLatestServersRequest
	(*FindLatestServersResponse)(nil),                                // 65: pb.FindLatestServersResponse
	(*FindNearbyServersRequest)(nil),                                 // 66: pb.FindNearbyServersRequest
	(*FindNearbyServersResponse)(nil),                                // 67: pb.FindNearbyServersResponse
	(*PurgeServerCacheRequest)(nil),                                  // 68: pb.PurgeServerCacheRequest
	(*PurgeServerCacheResponse)(nil),                                 // 69: pb.PurgeServerCacheResponse
	(*FindEnabledServerTrafficLimitRequest)(nil),                     // 70: pb.FindEnabledServerTrafficLimitRequest
	(*FindEnabledServerTrafficLimitResponse)(nil),                    // 71: pb.FindEnabledServerTrafficLimitResponse
	(*UpdateServerTrafficLimitRequest)(nil),                          // 72: pb.UpdateServerTrafficLimitRequest
	(*UpdateServerUserPlanRequest)(nil),                              // 73: pb.UpdateServerUserPlanRequest
	(*FindServerUserPlanRequest)(nil),                                // 74: pb.FindServerUserPlanRequest
	(*FindServerUserPlanResponse)(nil),                               // 75: pb.FindServerUserPlanResponse
	(*ComposeServerConfigRequest)(nil),                               // 76: pb.ComposeServerConfigRequest
	(*ComposeServerConfigResponse)(nil),                              // 77: pb.ComposeServerConfigResponse
	(*UpdateServerCRSRequest)(nil),                                   // 78: pb.UpdateServerCRSRequest
	(*FindEnabledServerCRSRequest)(nil),                              // 79: pb.FindEnabledServerCRSRequest
	(*FindEnabledServerCRSResponse)(nil),                             // 80: pb.FindEnabledServerCRSResponse
	(*UpdateServerUAMRequest)(nil),                                   // 81: pb.UpdateServerUAMRequest
	(*FindEnabledServerUAMRequest)(nil),                              // 82: pb.FindEnabledServerUAMRequest
	(*FindEnabledServerUAMResponse)(nil),                             // 83: pb.FindEnabledServerUAMResponse
	(*UpdateServerUserRequest)(nil),                                  // 84: pb.UpdateServerUserRequest
	(*UpdateServerNameRequest)(nil),                                  // 85: pb.UpdateServerNameRequest
	(*CopyServerConfigRequest)(nil),                                  // 86: pb.CopyServerConfigRequest
	(*UploadServerHTTPRequestStatRequest_RegionCity)(nil),            // 87: pb.UploadServerHTTPRequestStatRequest.RegionCity
	(*UploadServerHTTPRequestStatRequest_RegionProvider)(nil),        // 88: pb.UploadServerHTTPRequestStatRequest.RegionProvider
	(*UploadServerHTTPRequestStatRequest_System)(nil),                // 89: pb.UploadServerHTTPRequestStatRequest.System
	(*UploadServerHTTPRequestStatRequest_Browser)(nil),               // 90: pb.UploadServerHTTPRequestStatRequest.Browser
	(*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup)(nil), // 91: pb.UploadServerHTTPRequestStatRequest.HTTPFirewallRuleGroup
	(*FindNearbyServersResponse_GroupInfo)(nil),                      // 92: pb.FindNearbyServersResponse.GroupInfo
	(*ServerNameAuditingResult)(nil),                                 // 93: pb.ServerNameAuditingResult
	(*Server)(nil),                                                   // 94: pb.Server
	(*DNSDomain)(nil),                                                // 95: pb.DNSDomain
	(*UserPlan)(nil),                                                 // 96: pb.UserPlan
	(*RPCSuccess)(nil),                                               // 97: pb.RPCSuccess
	(*RPCCountResponse)(nil),                                         // 98: pb.RPCCountResponse
}
var file_service_server_proto_depIdxs = []int32{
	93, // 0: pb.FindServerNamesResponse.auditingResult:type_name -> pb.ServerNameAuditingResult
	93, // 1: pb.UpdateServerNamesAuditingRequest.auditingResult:type_name -> pb.ServerNameAuditingResult
	94, // 2: pb.ListEnabledServersMatchResponse.servers:type_name -> pb.Server
	94, // 3: pb.FindEnabledServerResponse.server:type_name -> pb.Server
	94, // 4: pb.FindAllEnabledServersWithGMCertIdResponse.servers:type_name -> pb.Server
	94, // 5: pb.FindAllEnabledServersWithSSLCertIdResponse.servers:type_name -> pb.Server
	48, // 6: pb.FindAllEnabledServersDNSWithNodeClusterIdResponse.servers:type_name -> pb.ServerDNSInfo
	95, // 7: pb.FindEnabledServerDNSResponse.domain:type_name -> pb.DNSDomain
	94, // 8: pb.FindAllUserServersResponse.servers:type_name -> pb.Server
	94, // 9: pb.FindEnabledUserServerBasicResponse.server:type_name -> pb.Server
	87, // 10: pb.UploadServerHTTPRequestStatRequest.regionCities:type_name -> pb.UploadServerHTTPRequestStatRequest.RegionCity
	88, // 11: pb.UploadServerHTTPRequestStatRequest.regionProviders:type_name -> pb.UploadServerHTTPRequestStatRequest.RegionProvider
	89, // 12: pb.UploadServerHTTPRequestStatRequest.systems:type_name -> pb.UploadServerHTTPRequestStatRequest.System
	90, // 13: pb.UploadServerHTTPRequestStatRequest.browsers:type_name -> pb.UploadServerHTTPRequestStatRequest.Browser
	91, // 14: pb.UploadServerHTTPRequestStatRequest.httpFirewallRuleGroups:type_name -> pb.UploadServerHTTPRequestStatRequest.HTTPFirewallRuleGroup
	94, // 15: pb.FindLatestServersResponse.servers:type_name -> pb.Server
	92, // 16: pb.FindNearbyServersResponse.groups:type_name -> pb.FindNearbyServersResponse.GroupInfo
	96, // 17: pb.FindServerUserPlanResponse.userPlan:type_name -> pb.UserPlan
	94, // 18: pb.FindNearbyServersResponse.GroupInfo.servers:type_name -> pb.Server
	0,  // 19: pb.ServerService.createServer:input_type -> pb.CreateServerRequest
	2,  // 20: pb.ServerService.updateServerBasic:input_type -> pb.UpdateServerBasicRequest
	3,  // 21: pb.ServerService.updateServerGroupIds:input_type -> pb.UpdateServerGroupIdsRequest
	4,  // 22: pb.ServerService.updateServerIsOn:input_type -> pb.UpdateServerIsOnRequest
	5,  // 23: pb.ServerService.updateServerHTTP:input_type -> pb.UpdateServerHTTPRequest
	6,  // 24: pb.ServerService.updateServerHTTPS:input_type -> pb.UpdateServerHTTPSRequest
	7,  // 25: pb.ServerService.updateServerTCP:input_type -> pb.UpdateServerTCPRequest
	8,  // 26: pb.ServerService.updateServerTLS:input_type -> pb.UpdateServerTLSRequest
	9,  // 27: pb.ServerService.updateServerUnix:input_type -> pb.UpdateServerUnixRequest
	10, // 28: pb.ServerService.updateServerUDP:input_type -> pb.UpdateServerUDPRequest
	11, // 29: pb.ServerService.updateServerWeb:input_type -> pb.UpdateServerWebRequest
	12, // 30: pb.ServerService.updateServerReverseProxy:input_type -> pb.UpdateServerReverseProxyRequest
	13, // 31: pb.ServerService.findServerNames:input_type -> pb.FindServerNamesRequest
	15, // 32: pb.ServerService.updateServerNames:input_type -> pb.UpdateServerNamesRequest
	16, // 33: pb.ServerService.updateServerNamesAuditing:input_type -> pb.UpdateServerNamesAuditingRequest
	17, // 34: pb.ServerService.updateServerDNS:input_type -> pb.UpdateServerDNSRequest
	18, // 35: pb.ServerService.regenerateServerDNSName:input_type -> pb.RegenerateServerDNSNameRequest
	19, // 36: pb.ServerService.updateServerDNSName:input_type -> pb.UpdateServerDNSNameRequest
	20, // 37: pb.ServerService.findServerIdWithDNSName:input_type -> pb.FindServerIdWithDNSNameRequest
	22, // 38: pb.ServerService.countAllEnabledServersMatch:input_type -> pb.CountAllEnabledServersMatchRequest
	23, // 39: pb.ServerService.listEnabledServersMatch:input_type -> pb.ListEnabledServersMatchRequest
	25, // 40: pb.ServerService.deleteServer:input_type -> pb.DeleteServerRequest
	26, // 41: pb.ServerService.findEnabledServer:input_type -> pb.FindEnabledServerRequest
	28, // 42: pb.ServerService.findEnabledServerConfig:input_type -> pb.FindEnabledServerConfigRequest
	30, // 43: pb.ServerService.findEnabledServerType:input_type -> pb.FindEnabledServerTypeRequest
	32, // 44: pb.ServerService.findAndInitServerReverseProxyConfig:input_type -> pb.FindAndInitServerReverseProxyConfigRequest
	34, // 45: pb.ServerService.findAndInitServerWebConfig:input_type -> pb.FindAndInitServerWebConfigRequest
	36, // 46: pb.ServerService.countAllEnabledServersWithGMCertId:input_type -> pb.CountAllEnabledServersWithGMCertIdRequest
	37, // 47: pb.ServerService.findAllEnabledServersWithGMCertId:input_type -> pb.FindAllEnabledServersWithGMCertIdRequest
	39, // 48: pb.ServerService.countAllEnabledServersWithSSLCertId:input_type -> pb.CountAllEnabledServersWithSSLCertIdRequest
	40, // 49: pb.ServerService.findAllEnabledServersWithSSLCertId:input_type -> pb.FindAllEnabledServersWithSSLCertIdRequest
	42, // 50: pb.ServerService.countAllEnabledServersWithNodeClusterId:input_type -> pb.CountAllEnabledServersWithNodeClusterIdRequest
	43, // 51: pb.ServerService.countAllEnabledServersWithServerGroupId:input_type -> pb.CountAllEnabledServersWithServerGroupIdRequest
	44, // 52: pb.ServerService.notifyServersChange:input_type -> pb.NotifyServersChangeRequest
	46, // 53: pb.ServerService.findAllEnabledServersDNSWithNodeClusterId:input_type -> pb.FindAllEnabledServersDNSWithNodeClusterIdRequest
	49, // 54: pb.ServerService.findEnabledServerDNS:input_type -> pb.FindEnabledServerDNSRequest
	51, // 55: pb.ServerService.checkUserServer:input_type -> pb.CheckUserServerRequest
	52, // 56: pb.ServerService.findAllEnabledServerNamesWithUserId:input_type -> pb.FindAllEnabledServerNamesWithUserIdRequest
	54, // 57: pb.ServerService.findAllUserServers:input_type -> pb.FindAllUserServersRequest
	56, // 58: pb.ServerService.composeAllUserServersConfig:input_type -> pb.ComposeAllUserServersConfigRequest
	58, // 59: pb.ServerService.findEnabledUserServerBasic:input_type -> pb.FindEnabledUserServerBasicRequest
	60, // 60: pb.ServerService.updateEnabledUserServerBasic:input_type -> pb.UpdateEnabledUserServerBasicRequest
	61, // 61: pb.ServerService.uploadServerHTTPRequestStat:input_type -> pb.UploadServerHTTPRequestStatRequest
	62, // 62: pb.ServerService.checkServerNameDuplicationInNodeCluster:input_type -> pb.CheckServerNameDuplicationInNodeClusterRequest
	64, // 63: pb.ServerService.findLatestServers:input_type -> pb.FindLatestServersRequest
	66, // 64: pb.ServerService.findNearbyServers:input_type -> pb.FindNearbyServersRequest
	68, // 65: pb.ServerService.purgeServerCache:input_type -> pb.PurgeServerCacheRequest
	70, // 66: pb.ServerService.findEnabledServerTrafficLimit:input_type -> pb.FindEnabledServerTrafficLimitRequest
	72, // 67: pb.ServerService.updateServerTrafficLimit:input_type -> pb.UpdateServerTrafficLimitRequest
	73, // 68: pb.ServerService.updateServerUserPlan:input_type -> pb.UpdateServerUserPlanRequest
	74, // 69: pb.ServerService.findServerUserPlan:input_type -> pb.FindServerUserPlanRequest
	76, // 70: pb.ServerService.composeServerConfig:input_type -> pb.ComposeServerConfigRequest
	78, // 71: pb.ServerService.updateServerCRS:input_type -> pb.UpdateServerCRSRequest
	79, // 72: pb.ServerService.findEnabledServerCRS:input_type -> pb.FindEnabledServerCRSRequest
	81, // 73: pb.ServerService.updateServerUAM:input_type -> pb.UpdateServerUAMRequest
	82, // 74: pb.ServerService.findEnabledServerUAM:input_type -> pb.FindEnabledServerUAMRequest
	84, // 75: pb.ServerService.updateServerUser:input_type -> pb.UpdateServerUserRequest
	85, // 76: pb.ServerService.updateServerName:input_type -> pb.UpdateServerNameRequest
	86, // 77: pb.ServerService.copyServerConfig:input_type -> pb.CopyServerConfigRequest
	1,  // 78: pb.ServerService.createServer:output_type -> pb.CreateServerResponse
	97, // 79: pb.ServerService.updateServerBasic:output_type -> pb.RPCSuccess
	97, // 80: pb.ServerService.updateServerGroupIds:output_type -> pb.RPCSuccess
	97, // 81: pb.ServerService.updateServerIsOn:output_type -> pb.RPCSuccess
	97, // 82: pb.ServerService.updateServerHTTP:output_type -> pb.RPCSuccess
	97, // 83: pb.ServerService.updateServerHTTPS:output_type -> pb.RPCSuccess
	97, // 84: pb.ServerService.updateServerTCP:output_type -> pb.RPCSuccess
	97, // 85: pb.ServerService.updateServerTLS:output_type -> pb.RPCSuccess
	97, // 86: pb.ServerService.updateServerUnix:output_type -> pb.RPCSuccess
	97, // 87: pb.ServerService.updateServerUDP:output_type -> pb.RPCSuccess
	97, // 88: pb.ServerService.updateServerWeb:output_type -> pb.RPCSuccess
	97, // 89: pb.ServerService.updateServerReverseProxy:output_type -> pb.RPCSuccess
	14, // 90: pb.ServerService.findServerNames:output_type -> pb.FindServerNamesResponse
	97, // 91: pb.ServerService.updateServerNames:output_type -> pb.RPCSuccess
	97, // 92: pb.ServerService.updateServerNamesAuditing:output_type -> pb.RPCSuccess
	97, // 93: pb.ServerService.updateServerDNS:output_type -> pb.RPCSuccess
	97, // 94: pb.ServerService.regenerateServerDNSName:output_type -> pb.RPCSuccess
	97, // 95: pb.ServerService.updateServerDNSName:output_type -> pb.RPCSuccess
	21, // 96: pb.ServerService.findServerIdWithDNSName:output_type -> pb.FindServerIdWithDNSNameResponse
	98, // 97: pb.ServerService.countAllEnabledServersMatch:output_type -> pb.RPCCountResponse
	24, // 98: pb.ServerService.listEnabledServersMatch:output_type -> pb.ListEnabledServersMatchResponse
	97, // 99: pb.ServerService.deleteServer:output_type -> pb.RPCSuccess
	27, // 100: pb.ServerService.findEnabledServer:output_type -> pb.FindEnabledServerResponse
	29, // 101: pb.ServerService.findEnabledServerConfig:output_type -> pb.FindEnabledServerConfigResponse
	31, // 102: pb.ServerService.findEnabledServerType:output_type -> pb.FindEnabledServerTypeResponse
	33, // 103: pb.ServerService.findAndInitServerReverseProxyConfig:output_type -> pb.FindAndInitServerReverseProxyConfigResponse
	35, // 104: pb.ServerService.findAndInitServerWebConfig:output_type -> pb.FindAndInitServerWebConfigResponse
	98, // 105: pb.ServerService.countAllEnabledServersWithGMCertId:output_type -> pb.RPCCountResponse
	38, // 106: pb.ServerService.findAllEnabledServersWithGMCertId:output_type -> pb.FindAllEnabledServersWithGMCertIdResponse
	98, // 107: pb.ServerService.countAllEnabledServersWithSSLCertId:output_type -> pb.RPCCountResponse
	41, // 108: pb.ServerService.findAllEnabledServersWithSSLCertId:output_type -> pb.FindAllEnabledServersWithSSLCertIdResponse
	98, // 109: pb.ServerService.countAllEnabledServersWithNodeClusterId:output_type -> pb.RPCCountResponse
	98, // 110: pb.ServerService.countAllEnabledServersWithServerGroupId:output_type -> pb.RPCCountResponse
	45, // 111: pb.ServerService.notifyServersChange:output_type -> pb.NotifyServersChangeResponse
	47, // 112: pb.ServerService.findAllEnabledServersDNSWithNodeClusterId:output_type -> pb.FindAllEnabledServersDNSWithNodeClusterIdResponse
	50, // 113: pb.ServerService.findEnabledServerDNS:output_type -> pb.FindEnabledServerDNSResponse
	97, // 114: pb.ServerService.checkUserServer:output_type -> pb.RPCSuccess
	53, // 115: pb.ServerService.findAllEnabledServerNamesWithUserId:output_type -> pb.FindAllEnabledServerNamesWithUserIdResponse
	55, // 116: pb.ServerService.findAllUserServers:output_type -> pb.FindAllUserServersResponse
	57, // 117: pb.ServerService.composeAllUserServersConfig:output_type -> pb.ComposeAllUserServersConfigResponse
	59, // 118: pb.ServerService.findEnabledUserServerBasic:output_type -> pb.FindEnabledUserServerBasicResponse
	97, // 119: pb.ServerService.updateEnabledUserServerBasic:output_type -> pb.RPCSuccess
	97, // 120: pb.ServerService.uploadServerHTTPRequestStat:output_type -> pb.RPCSuccess
	63, // 121: pb.ServerService.checkServerNameDuplicationInNodeCluster:output_type -> pb.CheckServerNameDuplicationInNodeClusterResponse
	65, // 122: pb.ServerService.findLatestServers:output_type -> pb.FindLatestServersResponse
	67, // 123: pb.ServerService.findNearbyServers:output_type -> pb.FindNearbyServersResponse
	69, // 124: pb.ServerService.purgeServerCache:output_type -> pb.PurgeServerCacheResponse
	71, // 125: pb.ServerService.findEnabledServerTrafficLimit:output_type -> pb.FindEnabledServerTrafficLimitResponse
	97, // 126: pb.ServerService.updateServerTrafficLimit:output_type -> pb.RPCSuccess
	97, // 127: pb.ServerService.updateServerUserPlan:output_type -> pb.RPCSuccess
	75, // 128: pb.ServerService.findServerUserPlan:output_type -> pb.FindServerUserPlanResponse
	77, // 129: pb.ServerService.composeServerConfig:output_type -> pb.ComposeServerConfigResponse
	97, // 130: pb.ServerService.updateServerCRS:output_type -> pb.RPCSuccess
	80, // 131: pb.ServerService.findEnabledServerCRS:output_type -> pb.FindEnabledServerCRSResponse
	97, // 132: pb.ServerService.updateServerUAM:output_type -> pb.RPCSuccess
	83, // 133: pb.ServerService.findEnabledServerUAM:output_type -> pb.FindEnabledServerUAMResponse
	97, // 134: pb.ServerService.updateServerUser:output_type -> pb.RPCSuccess
	97, // 135: pb.ServerService.updateServerName:output_type -> pb.RPCSuccess
	97, // 136: pb.ServerService.copyServerConfig:output_type -> pb.RPCSuccess
	78, // [78:137] is the sub-list for method output_type
	19, // [19:78] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_service_server_proto_init() }
func file_service_server_proto_init() {
	if File_service_server_proto != nil {
		return
	}
	file_models_model_server_proto_init()
	file_models_model_dns_domain_proto_init()
	file_models_model_server_name_auditing_result_proto_init()
	file_models_rpc_messages_proto_init()
	file_models_model_user_plan_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerGroupIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerIsOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerHTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerHTTPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTCPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTLSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUnixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUDPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerReverseProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerNamesAuditingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateServerDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerIdWithDNSNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerIdWithDNSNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledServersMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnabledServersMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerReverseProxyConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerReverseProxyConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerWebConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAndInitServerWebConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithGMCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithGMCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithGMCertIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithSSLCertIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersWithSSLCertIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithNodeClusterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllEnabledServersWithServerGroupIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServersChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyServersChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersDNSWithNodeClusterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServersDNSWithNodeClusterIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerDNSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerNamesWithUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllEnabledServerNamesWithUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllUserServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAllUserServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeAllUserServersConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeAllUserServersConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledUserServerBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnabledUserServerBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerNameDuplicationInNodeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckServerNameDuplicationInNodeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindLatestServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeServerCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeServerCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTrafficLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerTrafficLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerTrafficLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerUserPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindServerUserPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeServerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerCRSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerCRSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerCRSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerUAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindEnabledServerUAMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServerNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyServerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_RegionCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_RegionProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_Browser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadServerHTTPRequestStatRequest_HTTPFirewallRuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_server_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearbyServersResponse_GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_server_proto_goTypes,
		DependencyIndexes: file_service_server_proto_depIdxs,
		MessageInfos:      file_service_server_proto_msgTypes,
	}.Build()
	File_service_server_proto = out.File
	file_service_server_proto_rawDesc = nil
	file_service_server_proto_goTypes = nil
	file_service_server_proto_depIdxs = nil
}
