// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service_gm_cert.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GMCertServiceClient is the client API for GMCertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GMCertServiceClient interface {
	// 创建国密证书
	CreateGMCert(ctx context.Context, in *CreateGMCertRequest, opts ...grpc.CallOption) (*CreateGMCertResponse, error)
	FindEnabledGMCertConfig(ctx context.Context, in *FindEnabledGMCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledGMCertConfigResponse, error)
	// 修改证书
	UpdateGMCert(ctx context.Context, in *UpdateGMCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 计算匹配的证书数量
	CountGMCerts(ctx context.Context, in *CountGMCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error)
	// 删除证书
	DeleteGMCert(ctx context.Context, in *DeleteGMCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error)
	// 列出单页匹配的证书
	ListGMCerts(ctx context.Context, in *ListGMCertsRequest, opts ...grpc.CallOption) (*ListGMCertsResponse, error)
}

type gMCertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGMCertServiceClient(cc grpc.ClientConnInterface) GMCertServiceClient {
	return &gMCertServiceClient{cc}
}

func (c *gMCertServiceClient) CreateGMCert(ctx context.Context, in *CreateGMCertRequest, opts ...grpc.CallOption) (*CreateGMCertResponse, error) {
	out := new(CreateGMCertResponse)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/createGMCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMCertServiceClient) FindEnabledGMCertConfig(ctx context.Context, in *FindEnabledGMCertConfigRequest, opts ...grpc.CallOption) (*FindEnabledGMCertConfigResponse, error) {
	out := new(FindEnabledGMCertConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/findEnabledGMCertConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMCertServiceClient) UpdateGMCert(ctx context.Context, in *UpdateGMCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/updateGMCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMCertServiceClient) CountGMCerts(ctx context.Context, in *CountGMCertRequest, opts ...grpc.CallOption) (*RPCCountResponse, error) {
	out := new(RPCCountResponse)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/countGMCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMCertServiceClient) DeleteGMCert(ctx context.Context, in *DeleteGMCertRequest, opts ...grpc.CallOption) (*RPCSuccess, error) {
	out := new(RPCSuccess)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/deleteGMCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMCertServiceClient) ListGMCerts(ctx context.Context, in *ListGMCertsRequest, opts ...grpc.CallOption) (*ListGMCertsResponse, error) {
	out := new(ListGMCertsResponse)
	err := c.cc.Invoke(ctx, "/pb.GMCertService/listGMCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GMCertServiceServer is the server API for GMCertService service.
// All implementations must embed UnimplementedGMCertServiceServer
// for forward compatibility
type GMCertServiceServer interface {
	// 创建国密证书
	CreateGMCert(context.Context, *CreateGMCertRequest) (*CreateGMCertResponse, error)
	FindEnabledGMCertConfig(context.Context, *FindEnabledGMCertConfigRequest) (*FindEnabledGMCertConfigResponse, error)
	// 修改证书
	UpdateGMCert(context.Context, *UpdateGMCertRequest) (*RPCSuccess, error)
	// 计算匹配的证书数量
	CountGMCerts(context.Context, *CountGMCertRequest) (*RPCCountResponse, error)
	// 删除证书
	DeleteGMCert(context.Context, *DeleteGMCertRequest) (*RPCSuccess, error)
	// 列出单页匹配的证书
	ListGMCerts(context.Context, *ListGMCertsRequest) (*ListGMCertsResponse, error)
}

// UnimplementedGMCertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGMCertServiceServer struct {
}

func (UnimplementedGMCertServiceServer) CreateGMCert(context.Context, *CreateGMCertRequest) (*CreateGMCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGMCert not implemented")
}
func (UnimplementedGMCertServiceServer) FindEnabledGMCertConfig(context.Context, *FindEnabledGMCertConfigRequest) (*FindEnabledGMCertConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEnabledGMCertConfig not implemented")
}
func (UnimplementedGMCertServiceServer) UpdateGMCert(context.Context, *UpdateGMCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGMCert not implemented")
}
func (UnimplementedGMCertServiceServer) CountGMCerts(context.Context, *CountGMCertRequest) (*RPCCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGMCerts not implemented")
}
func (UnimplementedGMCertServiceServer) DeleteGMCert(context.Context, *DeleteGMCertRequest) (*RPCSuccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGMCert not implemented")
}
func (UnimplementedGMCertServiceServer) ListGMCerts(context.Context, *ListGMCertsRequest) (*ListGMCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGMCerts not implemented")
}
func (UnimplementedGMCertServiceServer) mustEmbedUnimplementedGMCertServiceServer() {}

func RegisterGMCertServiceServer(s grpc.ServiceRegistrar, srv GMCertServiceServer) {
	s.RegisterService(&GMCertService_ServiceDesc, srv)
}

func _GMCertService_CreateGMCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGMCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).CreateGMCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/createGMCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).CreateGMCert(ctx, req.(*CreateGMCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMCertService_FindEnabledGMCertConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEnabledGMCertConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).FindEnabledGMCertConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/findEnabledGMCertConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).FindEnabledGMCertConfig(ctx, req.(*FindEnabledGMCertConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMCertService_UpdateGMCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGMCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).UpdateGMCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/updateGMCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).UpdateGMCert(ctx, req.(*UpdateGMCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMCertService_CountGMCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGMCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).CountGMCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/countGMCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).CountGMCerts(ctx, req.(*CountGMCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMCertService_DeleteGMCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGMCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).DeleteGMCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/deleteGMCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).DeleteGMCert(ctx, req.(*DeleteGMCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMCertService_ListGMCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGMCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMCertServiceServer).ListGMCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GMCertService/listGMCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMCertServiceServer).ListGMCerts(ctx, req.(*ListGMCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GMCertService_ServiceDesc is the grpc.ServiceDesc for GMCertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GMCertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GMCertService",
	HandlerType: (*GMCertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createGMCert",
			Handler:    _GMCertService_CreateGMCert_Handler,
		},
		{
			MethodName: "findEnabledGMCertConfig",
			Handler:    _GMCertService_FindEnabledGMCertConfig_Handler,
		},
		{
			MethodName: "updateGMCert",
			Handler:    _GMCertService_UpdateGMCert_Handler,
		},
		{
			MethodName: "countGMCerts",
			Handler:    _GMCertService_CountGMCerts_Handler,
		},
		{
			MethodName: "deleteGMCert",
			Handler:    _GMCertService_DeleteGMCert_Handler,
		},
		{
			MethodName: "listGMCerts",
			Handler:    _GMCertService_ListGMCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gm_cert.proto",
}
